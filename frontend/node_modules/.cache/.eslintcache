[{"C:\\chatsApps\\chat\\frontend\\src\\index.js":"1","C:\\chatsApps\\chat\\frontend\\src\\App.js":"2","C:\\chatsApps\\chat\\frontend\\src\\components\\Context\\GlobalHooks.js":"3","C:\\chatsApps\\chat\\frontend\\src\\Pages\\ChatPage.js":"4","C:\\chatsApps\\chat\\frontend\\src\\Pages\\Homepage.js":"5","C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\Leftpart.js":"6","C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\Rightpart.js":"7","C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\Toppart.js":"8","C:\\chatsApps\\chat\\frontend\\src\\components\\authorization\\login.js":"9","C:\\chatsApps\\chat\\frontend\\src\\components\\authorization\\Signup.js":"10","C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\SingleChatBox.js":"11","C:\\chatsApps\\chat\\frontend\\src\\config\\ChatLogic.js":"12","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\UserList.js":"13","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\ChatLoading.js":"14","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\GroupChatModal.js":"15","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\ProfileBadge.js":"16","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\SingleChatsapperance.js":"17","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\UserBadgeItem.js":"18","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\GroupChatsapperance.js":"19","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\GroupSettings.js":"20"},{"size":478,"mtime":1656595847221,"results":"21","hashOfConfig":"22"},{"size":415,"mtime":1656595662868,"results":"23","hashOfConfig":"22"},{"size":1092,"mtime":1656600043055,"results":"24","hashOfConfig":"22"},{"size":791,"mtime":1658985458199,"results":"25","hashOfConfig":"22"},{"size":995,"mtime":1662189784468,"results":"26","hashOfConfig":"22"},{"size":4591,"mtime":1662196758706,"results":"27","hashOfConfig":"22"},{"size":589,"mtime":1662196733747,"results":"28","hashOfConfig":"22"},{"size":6668,"mtime":1659332231568,"results":"29","hashOfConfig":"22"},{"size":3197,"mtime":1661422015180,"results":"30","hashOfConfig":"22"},{"size":5699,"mtime":1656585844784,"results":"31","hashOfConfig":"22"},{"size":7901,"mtime":1662190718959,"results":"32","hashOfConfig":"22"},{"size":901,"mtime":1658989471033,"results":"33","hashOfConfig":"22"},{"size":940,"mtime":1659112994798,"results":"34","hashOfConfig":"22"},{"size":346,"mtime":1656582182828,"results":"35","hashOfConfig":"22"},{"size":5191,"mtime":1656680561948,"results":"36","hashOfConfig":"22"},{"size":1740,"mtime":1658995710810,"results":"37","hashOfConfig":"22"},{"size":1420,"mtime":1662190997119,"results":"38","hashOfConfig":"22"},{"size":554,"mtime":1656678959985,"results":"39","hashOfConfig":"22"},{"size":1292,"mtime":1659013068360,"results":"40","hashOfConfig":"22"},{"size":7388,"mtime":1657266511955,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1hyg33w",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"45"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"45"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\chatsApps\\chat\\frontend\\src\\index.js",[],[],[],"C:\\chatsApps\\chat\\frontend\\src\\App.js",["112"],[],"import \"./App.css\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Homepage from \"./Pages/Homepage\";\nimport ChatPage from './Pages/ChatPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route path=\"/chats\" element={<ChatPage />} />\n        </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\chatsApps\\chat\\frontend\\src\\components\\Context\\GlobalHooks.js",["113"],[],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory, useNavigate } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const userinfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userinfo);\r\n\r\n    if (!userinfo) navigate('/');\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","C:\\chatsApps\\chat\\frontend\\src\\Pages\\ChatPage.js",["114","115"],[],"import Toppart from \"../components/miscellaneous/Toppart\";\r\nimport Leftpart from \"../components/miscellaneous/Leftpart\";\r\nimport Rightpart from \"../components/miscellaneous/Rightpart\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../components/Context/GlobalHooks\";\r\nimport \"../App.css\"\r\n\r\nconst ChatPage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      {user && <Toppart />}\r\n      <div className=\"chat\">\r\n        {user && <Leftpart fetchAgain={fetchAgain} />}\r\n        {user &&  <Rightpart  fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}  />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","C:\\chatsApps\\chat\\frontend\\src\\Pages\\Homepage.js",["116"],[],"import { Container, Img } from \"@chakra-ui/react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\r\nimport Login from \"../components/authorization/login\";\r\nimport Signup from \"../components/authorization/Signup\";\r\nimport \"../App.css\";\r\n\r\nfunction Homepage() {\r\n  return (\r\n    <div className=\"home\">\r\n      <Container maxW=\"xl\" centerContent>\r\n        <Box bg=\"white\" w=\"100%\" p={6} borderRadius=\"lg\" borderWidth=\"1px\">\r\n          <Tabs isFitted variant=\"soft-rounded\" colorScheme=\"green\">\r\n            <TabList>\r\n              <Tab>Login</Tab>\r\n              <Tab>Sign Up</Tab>\r\n            </TabList>\r\n\r\n            <TabPanels >\r\n              <TabPanel >\r\n                <Login />\r\n              </TabPanel>\r\n              <TabPanel >\r\n                <Signup />\r\n              </TabPanel>\r\n            </TabPanels>\r\n          </Tabs>\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\Leftpart.js",["117","118","119"],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\Rightpart.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\Toppart.js",["120","121"],[],"import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  Tooltip,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { SearchIcon, ChevronDownIcon, BellIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  MenuDivider,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport ChatLoading from \"../Avatar/ChatLoading\";\r\nimport UserList from \"../Avatar/UserList\";\r\nimport ProfileModal from \"../Avatar/ProfileBadge\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ChatState } from \"../Context/GlobalHooks\";\r\nimport { getSender } from \"../../config/ChatLogic\";\r\n\r\nfunction Toppart() {\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [search, setSearch] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  console.log(user);\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\"/api/chat\", { userId }, config);\r\n          \r\n      console.log(data[0]);\r\n      if (!chats.find((c) => c._id === data._id)) \r\n      setChats([data[0], ...chats]);\r\n      setSelectedChat(data[0]);\r\n      setLoadingChat(false);\r\n      setSearchResult([]);\r\n      setSearch(\"\");\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n      >\r\n        <Tooltip label=\"Search the users\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <SearchIcon />\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Chat App\r\n        </Text>\r\n        <div>\r\n          <Menu >\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu p={6}>\r\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                //src={user.pic}\r\n                overflowY='hidden'\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>Profile</MenuItem>\r\n              </ProfileModal>\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer isOpen={isOpen} placement=\"left\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <Box display=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <>\r\n                <Spinner ml=\"auto\" display=\"flex\" />\r\n                <ChatLoading />\r\n              </>\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserList\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Toppart;\r\n","C:\\chatsApps\\chat\\frontend\\src\\components\\authorization\\login.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\authorization\\Signup.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\miscellaneous\\SingleChatBox.js",["122","123"],[],"import { ArrowBackIcon, ViewIcon } from \"@chakra-ui/icons\";\r\nimport \"./styles.css\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport GroupChats from \"../Avatar/GroupChatsapperance\";\r\nimport UpdateGroupChatModal from \"../Avatar/GroupSettings\";\r\nimport ProfileModal from \"../Avatar/ProfileBadge\";\r\nimport SingleChats from \"../Avatar/SingleChatsapperance\";\r\nimport { ChatState } from \"../Context/GlobalHooks\";\r\nimport io from \"socket.io-client\";\r\nimport { getSender, getSenderFull } from \"../../config/ChatLogic\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport \"./chatapplogo.png\";\r\n\r\nconst ENDPOINT = \"https://chattingapp2222.herokuapp.com/\";   //\"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nfunction SingleChat({ fetchAgain, setFetchAgain }) {\r\n  const { user, selectedChat, setSelectedChat, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const eventhandler = async (event) => {\r\n    if (event.key === \"Enter\") {\r\n      sendMessage();\r\n    }\r\n  };\r\n  const sendMessage = async () => {\r\n    if (newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n          `/api/message`,\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n\r\n        setMessages([...messages, data]);\r\n        socket.emit(\"new message\", data);\r\n        setNewMessage(\"\");\r\n        setFetchAgain(!fetchAgain);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connection\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n            bg=\"#F0F2F5\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)}>\r\n                  <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} />\r\n                </ProfileModal>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatname.toUpperCase()}\r\n                <>{istyping ? <div>Loading...</div> : <></>}</>\r\n                <UpdateGroupChatModal\r\n                  fetchMessages={fetchMessages}\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            //bg=\"#EFEAE2\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            overflowY=\"hidden\"\r\n            className=\"back\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <ScrollableFeed className=\"messages\">\r\n                {!selectedChat.isGroupChat ? (\r\n                  <SingleChats messages={messages} />\r\n                ) : (\r\n                  <GroupChats messages={messages} />\r\n                )}\r\n              </ScrollableFeed>\r\n            )}\r\n\r\n            <FormControl\r\n              display=\"flex\"\r\n              justifyContent=\"center\"\r\n              onKeyDown={eventhandler}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={5}\r\n              mb={3}\r\n            >\r\n              {istyping ? <div>Loading...</div> : <></>}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"white\"\r\n                width=\"90%\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n              <Button\r\n                type=\"button\"\r\n                marginLeft=\"8px\"\r\n                colorScheme=\"whatsapp\"\r\n                onClick={sendMessage}\r\n              >\r\n                Send\r\n              </Button>\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n          className=\"openwindow\"\r\n        >\r\n          <div className=\"insidewindow\">\r\n            <div>Click on a user to start chatting</div>\r\n          </div>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SingleChat;\r\n","C:\\chatsApps\\chat\\frontend\\src\\config\\ChatLogic.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\UserList.js",["124","125","126"],[],"import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../Context/GlobalHooks\";\r\nimport '../miscellaneous/styles.css';\r\nconst UserListItem = ({ handleFunction, user }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <div className=\"imageavatar\">\r\n          <div>\r\n            <img className=\"imageavatar\" src={user.pic} />\r\n          </div>\r\n      </div>\r\n      <div>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </div>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\ChatLoading.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\GroupChatModal.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\ProfileBadge.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\SingleChatsapperance.js",["127","128","129","130"],[],"import { isSameSenderMargin, isSameUser } from \"../../config/ChatLogic\";\r\nimport { ChatState } from \"../Context/GlobalHooks\";\r\nimport \"../miscellaneous/styles.css\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nfunction SingleChats({messages}){\r\n\r\n    const {user} = ChatState();\r\n\r\n    return (\r\n      <>\r\n        {messages &&\r\n          messages.map((m, i) => (\r\n            <div style={{ display: \"flex\" }} key={m._id}>\r\n              <span\r\n                style={{\r\n                  backgroundColor: `${\r\n                    m.sender._id === user._id ? \"white\" : \"#D9FDD3\"\r\n                  }`,\r\n                  marginLeft: user._id == m.sender._id ? \"auto\" : 50,\r\n                  marginRight: user._id == m.sender._id ? 50 : \"auto\",\r\n                  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                  //marginTop: \"8px\",\r\n                  borderRadius: \"10px\",\r\n                  borderTopLeftRadius: `${\r\n                    m.sender._id === user._id ? \"10px\" : 0\r\n                  }`,\r\n                  borderBottomRightRadius: `${\r\n                    m.sender._id === user._id ? 0 : \"10px\"\r\n                  }`,\r\n                  padding: \"5px 15px\",\r\n                  maxWidth: \"75%\",\r\n                }}\r\n              >\r\n                {m.content}\r\n              </span>\r\n            </div>\r\n          ))}\r\n      </>\r\n    );\r\n}\r\n\r\nexport default SingleChats;","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\UserBadgeItem.js",[],[],"C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\GroupChatsapperance.js",["131","132","133"],[],"import { ChatState } from \"../Context/GlobalHooks\";\r\nimport { isSameSenderMargin, isSameUser } from \"../../config/ChatLogic\";\r\n\r\nfunction GroupChats({ messages }) {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"white\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: user._id == m.sender._id ? \"auto\" : 50,\r\n                marginRight: user._id == m.sender._id ? 50 : \"auto\",\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                //marginTop: \"8px\",\r\n                borderRadius: \"10px\",\r\n                borderTopLeftRadius: 0,\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.sender._id === user._id ? (\r\n                m.content\r\n              ) : (\r\n                <>\r\n                  <b>{m.sender.name}</b>\r\n                  <br></br>\r\n                  {m.content}\r\n                </>\r\n              )}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GroupChats;\r\n","C:\\chatsApps\\chat\\frontend\\src\\components\\Avatar\\GroupSettings.js",[],[],{"ruleId":"134","severity":1,"message":"135","line":2,"column":27,"nodeType":"136","messageId":"137","endLine":2,"endColumn":33},{"ruleId":"134","severity":1,"message":"138","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":20},{"ruleId":"134","severity":1,"message":"139","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":13},{"ruleId":"134","severity":1,"message":"140","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":19},{"ruleId":"134","severity":1,"message":"141","line":1,"column":21,"nodeType":"136","messageId":"137","endLine":1,"endColumn":24},{"ruleId":"134","severity":1,"message":"142","line":2,"column":31,"nodeType":"136","messageId":"137","endLine":2,"endColumn":36},{"ruleId":"143","severity":1,"message":"144","line":40,"column":6,"nodeType":"145","endLine":40,"endColumn":18,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":101,"column":23,"nodeType":"149","endLine":108,"endColumn":25},{"ruleId":"134","severity":1,"message":"150","line":18,"column":3,"nodeType":"136","messageId":"137","endLine":18,"endColumn":14},{"ruleId":"134","severity":1,"message":"151","line":46,"column":10,"nodeType":"136","messageId":"137","endLine":46,"endColumn":21},{"ruleId":"143","severity":1,"message":"152","line":115,"column":6,"nodeType":"145","endLine":115,"endColumn":8,"suggestions":"153"},{"ruleId":"143","severity":1,"message":"154","line":121,"column":6,"nodeType":"145","endLine":121,"endColumn":20,"suggestions":"155"},{"ruleId":"134","severity":1,"message":"156","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":16},{"ruleId":"134","severity":1,"message":"157","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":26,"column":13,"nodeType":"149","endLine":26,"endColumn":59},{"ruleId":"134","severity":1,"message":"158","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":28},{"ruleId":"134","severity":1,"message":"159","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":22},{"ruleId":"160","severity":1,"message":"161","line":19,"column":40,"nodeType":"162","messageId":"163","endLine":19,"endColumn":42},{"ruleId":"160","severity":1,"message":"161","line":20,"column":41,"nodeType":"162","messageId":"163","endLine":20,"endColumn":43},{"ruleId":"134","severity":1,"message":"158","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":28},{"ruleId":"160","severity":1,"message":"161","line":17,"column":38,"nodeType":"162","messageId":"163","endLine":17,"endColumn":40},{"ruleId":"160","severity":1,"message":"161","line":18,"column":39,"nodeType":"162","messageId":"163","endLine":18,"endColumn":41},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Box' is defined but never used.","'useEffect' is defined but never used.","'Img' is defined but never used.","'Stack' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["164"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'MenuDivider' is defined but never used.","'loadingChat' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["166"],"'Avatar' is defined but never used.","'ChatState' is defined but never used.","'isSameSenderMargin' is defined but never used.","'ScrollableFeed' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"173","text":"174"},"Update the dependencies array to be: [user]",{"range":"175","text":"176"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"177","text":"178"},[1256,1268],"[fetchAgain, fetchChats]",[3344,3346],"[user]",[3443,3457],"[fetchMessages, selectedChat]"]